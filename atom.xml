<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cola’s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-16T13:05:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.cola</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scheduled</title>
    <link href="http://yoursite.com/2018/01/15/scheduled/"/>
    <id>http://yoursite.com/2018/01/15/scheduled/</id>
    <published>2018-01-15T14:01:59.000Z</published>
    <updated>2018-01-16T13:05:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Spring定时器</p><blockquote><p>项目的算法需要隔五分钟跑一次，以前听闻quartz框架，经过一番了解感觉对于目前项目的需求来说这个框架太重了，遂决定使用spring的@scheduled注解作为定时器<br><a id="more"></a></p></blockquote><p>##Spring.xml配置</p><ul><li><p>开头bean标签中添加以下内容：</p><pre><code>xmlns:task=&quot;http://www.springframework.org/schema/task&quot; </code></pre></li><li><p>xsi:schemaLocation中添加以下内容：</p><pre><code>http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd &quot;</code></pre></li><li><p>xml里添加以下内容：</p><pre><code>&lt;task:annotation-driven /&gt;</code></pre></li><li><p>开启注解</p><pre><code>&lt;context:annotation-config /&gt;</code></pre></li><li><p>扫描Controller</p><pre><code>&lt;context:component-scan base-package=&quot;com.paonan.server.controller&quot; use-default-filters=&quot;false&quot;&gt;&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;&lt;/context:component-scan&gt;</code></pre></li><li><p>@Scheduled注解</p><blockquote><p>在要定时执行的方法上加上@Scheduled注解。<br>@Scheduled注解后可加表达式（cron=””）来指定具体时间间隔</p></blockquote><pre><code>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。按顺序依次为秒（0~59）分钟（0~59）小时（0~23）天（月）（0~31，但是你需要考虑你月的天数）月（0~11）天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）年份（1970－2099）其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于&quot;月份中的日期&quot;和&quot;星期中的日期&quot;这两个元素互斥的,必须要对其中一个设置?.0 0 10,14,16 * * ? 每天上午10点，下午2点，4点0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时0 0 12 ? * WED 表示每个星期三中午12点 &quot;0 0 12 * * ?&quot; 每天中午12点触发 &quot;0 15 10 ? * *&quot; 每天上午10:15触发 &quot;0 15 10 * * ?&quot; 每天上午10:15触发 &quot;0 15 10 * * ? *&quot; 每天上午10:15触发 &quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发 &quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发 &quot;0 0/5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发 &quot;0 0/5 14,18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 &quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发 &quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发 &quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发 &quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发 &quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发 &quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发 &quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发 &quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发 有些子表达式能包含一些范围或列表例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”“*”字符代表所有可能的值因此，“*”在子表达式（月）里表示每个月的含义，“*”在子表达式（天（星期））表示星期的每一天“/”字符用来指定数值的增量例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟     在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写但是它在两个子表达式里的含义是不同的。在天（月）子表达式中，“L”表示一个月的最后一天在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT如果在“L”前有具体的内容，它就具有其他的含义了例如：“6L”表示这个月的倒数第６天，“ＦＲＩＬ”表示这个月的最一个星期五注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题字段   允许值   允许的特殊字符秒         0-59         , - * /分         0-59         , - * /小时         0-23         , - * /日期         1-31         , - * ? / L W C月份         1-12 或者 JAN-DEC         , - * /星期         1-7 或者 SUN-SAT         , - * ? / L C #年（可选）         留空, 1970-2099         , - * /</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Spring定时器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目的算法需要隔五分钟跑一次，以前听闻quartz框架，经过一番了解感觉对于目前项目的需求来说这个框架太重了，遂决定使用spring的@scheduled注解作为定时器&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>storedProcedure</title>
    <link href="http://yoursite.com/2018/01/15/storedProcedure/"/>
    <id>http://yoursite.com/2018/01/15/storedProcedure/</id>
    <published>2018-01-15T14:01:37.000Z</published>
    <updated>2018-01-16T13:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>#MySQL存储过程</p><blockquote><p>最近项目中遇到一些需要写存储过程的需求，设置商家自动关闭与打开，自动评价，团购活动自动下架等等。项目的需求就是学习的动力，掌握了语法很快就能写出一个满足需求的存储过程。</p></blockquote><a id="more"></a><p>###语法<br>    create procedure 存储过程名()</p><pre><code>DECLARE uid INT; #注意声明的变量名不能跟表的字段名一致，否则会报错。如user的主键是id，那么这里声明用来存id值的变量名就不能为id，可以改为uid等DECLARE done INT DEFAULT 0; #repeat结束标识DECLARE userCur cursor for select id from user; #声明游标DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1; #当循环列表完毕后将done设置为1open userCur; #打开游标REPEAT //进入循环FETCH userCur into uid; //赋值IF NOT DONE THEN //当done!=1继续循环搞事情.....END IF;UNTIL done END REPEAT; //知道done=1时结束循环END;</code></pre><p>###示例<br>引入一段我自己写的存储过程来相互验证：</p><pre><code>BEGIN    DECLARE activity_id INT(20);    DECLARE start_time CHAR(20);    DECLARE end_time CHAR(20);    DECLARE goods_id INT(11);    DECLARE nowDateStr CHAR(20);    DECLARE done INT DEFAULT 0;     DECLARE cur_project CURSOR FOR        SELECT activityId,DATE_FORMAT(startTime, &apos;%Y-%m-%d %H:%i:%s&apos;),DATE_FORMAT(endTime, &apos;%Y-%m-%d %H:%i:%s&apos;),goodsId        FROM t_activity        WHERE delStatus = 0        ORDER BY activityId;    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;    SET nowDateStr = DATE_FORMAT(SYSDATE(), &apos;%Y-%m-%d %H:%i:%s&apos;);    OPEN cur_project;//打开游标    FETCH NEXT FROM cur_project INTO activity_id, start_time,end_time,goods_id;//从游标中循环取值    REPEAT    IF NOT done THEN        IF TIMESTAMPDIFF(SECOND,start_time,nowDateStr) &gt;=0 AND TIMESTAMPDIFF(SECOND,end_time,nowDateStr) &lt;=0 THEN                UPDATE t_goods SET isOffered = 0 where goodsId = goods_id;        END IF;        IF TIMESTAMPDIFF(SECOND,start_time,nowDateStr) &lt;0 OR TIMESTAMPDIFF(SECOND,end_time,nowDateStr) &gt;0 THEN                UPDATE t_goods SET isOffered = 1 where goodsId = goods_id;        END IF;        COMMIT;    END IF;    FETCH NEXT FROM cur_project INTO activity_id, start_time,end_time,goods_id;      UNTIL done END REPEAT;    CLOSE cur_project;//关闭游标END</code></pre><blockquote><p>最后加上事件，设置执行时间，至于时间间隔长短就看需求而言了。</p></blockquote><p>###引申1</p><blockquote><p>再来看一段loop的代码片段，与repeat有异曲同工之处。</p></blockquote><pre><code>begin   declare  b int;   declare  use_no    varchar(10);   declare  use_name  varchar(400);   declare  card_id   varchar(400);   declare  count     int;   declare  cur_1  cursor for select s2.member_id,s2.realname,s2.card_id from  bh_member.mb_member s1,bh_member.mb_member_info s2where s1.id = s2.member_id;                        -- 如果不加该行  游标为空的时候  就会报错DECLARE CONTINUE HANDLER FOR NOT FOUND     --  如果不加该行的话将直接报错.No data - zero rows fetched, selected, or processed     SET b = 0;    -- （1） sql 赋值    select count(1)  INTO count   from   bh_member.mb_member s1,bh_member.mb_member_info s2 where  s1.id = s2.member_id;    OPEN cur_1;    loop_label: loop          -- 从游标中循环取值          FETCH cur_1 INTO use_no, use_name, card_id;              insert into zh_ceshi(use_no,use_name,card_id)  values(use_no, use_name, card_id);          set b=b+1;          if b = count    then              leave loop_label;          end if;    end loop;    CLOSE cur_1; end;</code></pre><blockquote><p>loop 标志位无条件循环，leave 类似于break 语句，跳出循环，跳出 begin end，iterate 类似于continue ，结束本次循环</p></blockquote><p>###引申2</p><blockquote><p>再来一段while的代码片段</p></blockquote><pre><code>BEGIN   DECLARE x  INT;   DECLARE str  VARCHAR(255);   SET x = 1;   SET str =  &apos;&apos;;   WHILE x  &lt;= 5 DO       SET  str = CONCAT(str,x,&apos;,&apos;);       SET  x = x + 1;   END WHILE;   SELECT str;  END $$  </code></pre><blockquote><p>上面的例子最后输出“1,2,3,4,5,”这样的字符。</p></blockquote><p>至此，mysql存储过程的三大循环结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#MySQL存储过程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近项目中遇到一些需要写存储过程的需求，设置商家自动关闭与打开，自动评价，团购活动自动下架等等。项目的需求就是学习的动力，掌握了语法很快就能写出一个满足需求的存储过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello MacDown</title>
    <link href="http://yoursite.com/2018/01/11/hello-MacDown/"/>
    <id>http://yoursite.com/2018/01/11/hello-MacDown/</id>
    <published>2018-01-11T15:48:07.000Z</published>
    <updated>2018-01-15T14:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a>MacDown</h1><p><img src="http://macdown.uranusjr.com/static/images/logo-160.png" alt="MacDown logo"></p><p>Hello there! I’m <strong>MacDown</strong>, the open source Markdown editor for OS X.</p><p>Let me introduce myself.</p><a id="more"></a><h2 id="Markdown-and-I"><a href="#Markdown-and-I" class="headerlink" title="Markdown and I"></a>Markdown and I</h2><p><strong>Markdown</strong> is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">here</a>.</p><p><strong>MacDown</strong> is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.</p><p><img src="http://d.pr/i/10UGP+" alt="MacDown Screenshot"></p><p>I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>.</p><p>You can specify extra HTML rendering options through the <a href="#rendering-pane"><strong>Rendering</strong> preference pane</a>.</p><p>You can customize the editor window to you liking in the <a href="#editor-pane"><strong>Editor</strong> preferences pane</a>:</p><p>You can configure various application (that’s me!) behaviors in the <a href="#general-pane"><strong>General</strong> preference pane</a>.</p><h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>Before I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>. Lets jump right in.  </p><h3 id="Line-Breaks"><a href="#Line-Breaks" class="headerlink" title="Line Breaks"></a>Line Breaks</h3><p>To force a line break, put two spaces and a newline (return) at the end of the line.</p><ul><li><p>This two-line bullet<br>won’t break</p></li><li><p>This two-line bullet<br>will break</p></li></ul><p>Here is the code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* This two-line bullet </span><br><span class="line">won&apos;t break</span><br><span class="line"></span><br><span class="line">* This two-line bullet  </span><br><span class="line">will break</span><br></pre></td></tr></table></figure><h3 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h3><p><strong>Strong</strong>: <code>**Strong**</code> or <code>__Strong__</code> (Command-B)<br><em>Emphasize</em>: <code>*Emphasize*</code> or <code>_Emphasize_</code>[^emphasize] (Command-I)</p><h3 id="Headers-like-this-one"><a href="#Headers-like-this-one" class="headerlink" title="Headers (like this one!)"></a>Headers (like this one!)</h3><pre><code>Header 1========Header 2--------</code></pre><p>or</p><pre><code># Header 1## Header 2### Header 3#### Header 4##### Header 5###### Header 6</code></pre><h3 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h3><h4 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h4><p>Just put angle brackets around an email and it becomes clickable: <a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#117;&#114;&#97;&#x6e;&#117;&#115;&#x6a;&#114;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#117;&#114;&#97;&#x6e;&#117;&#115;&#x6a;&#114;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a><br><code>&lt;uranusjr@gmail.com&gt;</code>  </p><p>Same thing with urls: <a href="http://macdown.uranusjr.com" target="_blank" rel="noopener">http://macdown.uranusjr.com</a><br><code>&lt;http://macdown.uranusjr.com&gt;</code>  </p><p>Perhaps you want to some link text like this: <a href="http://macdown.uranusjr.com" title="Title" target="_blank" rel="noopener">Macdown Website</a><br><code>[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;)</code> (The title is optional)  </p><h4 id="Reference-style"><a href="#Reference-style" class="headerlink" title="Reference style"></a>Reference style</h4><p>Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  </p><p>Make <a href="http://macdown.uranusjr.com" title="Title" target="_blank" rel="noopener">a link</a> <code>[a link][arbitrary_id]</code> then on it’s own line anywhere else in the file:<br><code>[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot;</code></p><p>If the link text itself would make a good id, you can link <a href="http://macdown.uranusjr.com" target="_blank" rel="noopener">like this</a> <code>[like this][]</code>, then on it’s own line anywhere else in the file:<br><code>[like this]: http://macdown.uranusjr.com</code>  </p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><h4 id="Inline-1"><a href="#Inline-1" class="headerlink" title="Inline"></a>Inline</h4><p><code>![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;)</code></p><h4 id="Reference-style-1"><a href="#Reference-style-1" class="headerlink" title="Reference style"></a>Reference style</h4><p><code>![Alt Image Text][image-id]</code><br>on it’s own line elsewhere:<br><code>[image-id]: path/or/url/to.jpg &quot;Optional Title&quot;</code></p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><ul><li>Lists must be preceded by a blank line (or block element)</li><li>Unordered lists start each item with a <code>*</code></li></ul><ul><li><code>-</code> works too<ul><li>Indent a level to make a nested list<ol><li>Ordered lists are supported.</li><li>Start each item (number-period-space) like <code>1.</code></li><li>It doesn’t matter what number you use, I will render them sequentially</li><li>So you might want to start each line with <code>1.</code> and let me sort it out</li></ol></li></ul></li></ul><p>Here is the code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Lists must be preceded by a blank line (or block element)</span><br><span class="line">* Unordered lists start each item with a `*`</span><br><span class="line">- `-` works too</span><br><span class="line">* Indent a level to make a nested list</span><br><span class="line">1. Ordered lists are supported.</span><br><span class="line">2. Start each item (number-period-space) like `1. `</span><br><span class="line">42. It doesn&apos;t matter what number you use, I will render them sequentially</span><br><span class="line">1. So you might want to start each line with `1.` and let me sort it out</span><br></pre></td></tr></table></figure><h3 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h3><blockquote><p>Angle brackets <code>&gt;</code> are used for block quotes.<br>Technically not every line needs to start with a <code>&gt;</code> as long as<br>there are no empty lines between paragraphs.<br>Looks kinda ugly though.</p><blockquote><p>Block quotes can be nested.  </p><blockquote><p>Multiple Levels</p></blockquote></blockquote><p>Most markdown syntaxes work inside block quotes.</p><ul><li>Lists</li><li><a href="http://macdown.uranusjr.com" title="Title" target="_blank" rel="noopener">Links</a></li><li>Etc.</li></ul></blockquote><p>Here is the code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; Angle brackets `&gt;` are used for block quotes.  </span><br><span class="line">Technically not every line needs to start with a `&gt;` as long as</span><br><span class="line">there are no empty lines between paragraphs.  </span><br><span class="line">&gt; Looks kinda ugly though.</span><br><span class="line">&gt; &gt; Block quotes can be nested.  </span><br><span class="line">&gt; &gt; &gt; Multiple Levels</span><br><span class="line">&gt;</span><br><span class="line">&gt; Most markdown syntaxes work inside block quotes.</span><br><span class="line">&gt;</span><br><span class="line">&gt; * Lists</span><br><span class="line">&gt; * [Links][arbitrary_id]</span><br><span class="line">&gt; * Etc.</span><br></pre></td></tr></table></figure><h3 id="Inline-Code"><a href="#Inline-Code" class="headerlink" title="Inline Code"></a>Inline Code</h3><p><code>Inline code</code> is indicated by surrounding it with backticks:<br><code>`Inline code`</code></p><p>If your <code>code has `backticks`</code> that need to be displayed, you can use double backticks:<br><figure class="highlight plain"><figcaption><span>``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### Block Code</span><br><span class="line">If you indent at least four spaces or one tab, I&apos;ll display a code block.</span><br><span class="line"></span><br><span class="line">print(&apos;This is a code block&apos;)</span><br><span class="line">print(&apos;The block must be preceded by a blank line&apos;)</span><br><span class="line">print(&apos;Then indent at least 4 spaces or 1 tab&apos;)</span><br><span class="line">print(&apos;Nesting does nothing. Your code is displayed Literally&apos;)</span><br><span class="line"></span><br><span class="line">I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.</span><br><span class="line"></span><br><span class="line">### Horizontal Rules</span><br><span class="line">If you type three asterisks `***` or three dashes `---` on a line, I&apos;ll display a horizontal rule:</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## &lt;a name=&quot;markdown-pane&quot;&gt;&lt;/a&gt;The Markdown Preference Pane</span><br><span class="line">This is where I keep all preferences related to how I parse markdown into html.  </span><br><span class="line">![Markdown preferences pane](http://d.pr/i/RQEi+)</span><br><span class="line"></span><br><span class="line">### Document Formatting</span><br><span class="line">The ***Smartypants*** extension automatically transforms straight quotes (`&quot;` and `&apos;`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Block Formatting</span><br><span class="line"></span><br><span class="line">#### Table</span><br><span class="line"></span><br><span class="line">This is a table:</span><br><span class="line"></span><br><span class="line">First Header  | Second Header</span><br><span class="line">------------- | -------------</span><br><span class="line">Content Cell  | Content Cell</span><br><span class="line">Content Cell  | Content Cell</span><br><span class="line"></span><br><span class="line">You can align cell contents with syntax like this:</span><br><span class="line"></span><br><span class="line">| Left Aligned  | Center Aligned  | Right Aligned |</span><br><span class="line">|:------------- |:---------------:| -------------:|</span><br><span class="line">| col 3 is      | some wordy text |         $1600 |</span><br><span class="line">| col 2 is      | centered        |           $12 |</span><br><span class="line">| zebra stripes | are neat        |            $1 |</span><br><span class="line"></span><br><span class="line">The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.</span><br><span class="line"></span><br><span class="line">#### &lt;a name=&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">This is a fenced code block:</span><br></pre></td></tr></table></figure></p><p>print(‘Hello world!’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">You can also use waves (`~`) instead of back ticks (`` ` ``):</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">print(&apos;Hello world!&apos;)</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:</span><br><span class="line"></span><br><span class="line">![Syntax highlighting example](http://d.pr/i/9HM6+)</span><br><span class="line"></span><br><span class="line">I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Inline Formatting</span><br><span class="line"></span><br><span class="line">The following is a list of optional inline markups supported:</span><br><span class="line"></span><br><span class="line">Option name         | Markup           | Result if enabled     |</span><br><span class="line">--------------------|------------------|-----------------------|</span><br><span class="line">Intra-word emphasis | So A\*maz\*ing   | So A&lt;em&gt;maz&lt;/em&gt;ing   |</span><br><span class="line">Strikethrough       | \~~Much wow\~~   | &lt;del&gt;Much wow&lt;/del&gt;   |</span><br><span class="line">Underline [^under]  | \_So doge\_      | &lt;u&gt;So doge&lt;/u&gt;        |</span><br><span class="line">Quote [^quote]      | \&quot;Such editor\&quot;  | &lt;q&gt;Such editor&lt;/q&gt;    |</span><br><span class="line">Highlight           | \==So good\==    | &lt;mark&gt;So good&lt;/mark&gt;  |</span><br><span class="line">Superscript         | hoge\^(fuga)     | hoge&lt;sup&gt;fuga&lt;/sup&gt;   |</span><br><span class="line">Autolink            | http://t.co      | &lt;http://t.co&gt;         |</span><br><span class="line">Footnotes           | [\^4] and [\^4]: | [^4] and footnote 4   |</span><br><span class="line"></span><br><span class="line">[^4]: You don&apos;t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## &lt;a name=&quot;rendering-pane&quot;&gt;&lt;/a&gt;The Rendering Preference Pane</span><br><span class="line">This is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  </span><br><span class="line">![Rendering preferences pane](http://d.pr/i/rT4d+)</span><br><span class="line"></span><br><span class="line">### CSS</span><br><span class="line">You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.</span><br><span class="line"></span><br><span class="line">### Syntax Highlighting</span><br><span class="line">You have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.</span><br><span class="line"></span><br><span class="line">### TeX-like Math Syntax</span><br><span class="line">I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): &lt;math&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;, and block math:</span><br><span class="line"></span><br><span class="line">\\[</span><br><span class="line">    A^T_S = B</span><br><span class="line">\\]</span><br><span class="line"></span><br><span class="line">or (in MathML)</span><br><span class="line"></span><br><span class="line">&lt;math display=&quot;block&quot;&gt;</span><br><span class="line">    &lt;msubsup&gt;&lt;mi&gt;A&lt;/mi&gt; &lt;mi&gt;S&lt;/mi&gt; &lt;mi&gt;T&lt;/mi&gt;&lt;/msubsup&gt;</span><br><span class="line">    &lt;mo&gt;=&lt;/mo&gt;</span><br><span class="line">    &lt;mi&gt;B&lt;/mi&gt;</span><br><span class="line">&lt;/math&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Task List Syntax</span><br><span class="line">1. [x] I can render checkbox list syntax</span><br><span class="line">* [x] I support nesting</span><br><span class="line">* [x] I support ordered *and* unordered lists</span><br><span class="line">2. [ ] I don&apos;t support clicking checkboxes directly in the html window</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Jekyll front-matter</span><br><span class="line">If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:</span><br></pre></td></tr></table></figure></p><hr><p>title: “Macdown is my friend”</p><h2 id="date-2014-06-06-20-00-00"><a href="#date-2014-06-06-20-00-00" class="headerlink" title="date: 2014-06-06 20:00:00"></a>date: 2014-06-06 20:00:00</h2><p>```</p><h3 id="Render-newline-literally"><a href="#Render-newline-literally" class="headerlink" title="Render newline literally"></a>Render newline literally</h3><p>Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some <em>other</em> program render it.</p><h2 id="The-General-Preferences-Pane"><a href="#The-General-Preferences-Pane" class="headerlink" title="The General Preferences Pane"></a><a name="general-pane"></a>The General Preferences Pane</h2><p>This is where I keep preferences related to application behavior.<br><img src="http://d.pr/i/rvwu+" alt="General preferences pane"></p><p>The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit <code>command-R</code> instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  </p><h2 id="The-Editor-Preference-Pane"><a href="#The-Editor-Preference-Pane" class="headerlink" title="The Editor Preference Pane"></a><a name="editor-pane"></a>The Editor Preference Pane</h2><p>This is where I keep preferences related to the behavior and styling of the editing window.<br><img src="http://d.pr/i/6OL5+" alt="Editor preferences pane"></p><h3 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h3><p>My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of <a href="http://mouapp.com" target="_blank" rel="noopener">Mou</a>’s creator, Chen Luo) if you don’t know where to start.</p><p>You can also edit, or even add new themes if you want to! Just click the <strong><em>Reveal</em></strong> button, and start moving things around. Remember to use the correct file extension (<code>.styles</code>), though. I’m picky about that.</p><p>I offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.</p><h2 id="Hack-On"><a href="#Hack-On" class="headerlink" title="Hack On"></a>Hack On</h2><p>That’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).</p><p>Happy writing!</p><p>[^emphasize]: If <strong>Underlines</strong> is turned on, <code>_this notation_</code> will render as underlined instead of emphasized </p><p>[^under]: If <strong>Underline</strong> is disabled <code>_this_</code> will be rendered as <em>emphasized</em> instead of being underlined.</p><p>[^quote]: <strong>Quote</strong> replaces literal <code>&quot;</code> characters with html <code>&lt;q&gt;</code> tags. <strong>Quote</strong> and <strong>Smartypants</strong> are syntactically incompatible. If both are enabled, <strong>Quote</strong> takes precedence. Note that <strong>Quote</strong> is different from <em>blockquote</em>, which is part of standard Markdown.</p><p>[^math]: Internet connection required.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MacDown&quot;&gt;&lt;a href=&quot;#MacDown&quot; class=&quot;headerlink&quot; title=&quot;MacDown&quot;&gt;&lt;/a&gt;MacDown&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://macdown.uranusjr.com/static/images/logo-160.png&quot; alt=&quot;MacDown logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hello there! I’m &lt;strong&gt;MacDown&lt;/strong&gt;, the open source Markdown editor for OS X.&lt;/p&gt;
&lt;p&gt;Let me introduce myself.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
